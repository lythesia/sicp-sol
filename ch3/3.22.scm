(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?) (error "FRONT empty queue") (car front-ptr))
    )
    (define (insert-queue! i)
      (let ((new (cons i '())))
        (cond
          ((empty-queue?) (set! front-ptr new) (set! rear-ptr new))
          (else (set-cdr! rear-ptr new) (set! rear-ptr new))
        )
      )
    )
    (define (delete-queue!)
      (cond
        ((empty-queue?) (error "DELETE empty queue"))
        (else (set! front-ptr (cdr front-ptr)))
      )
    )
    (define (dispatch m)
      (cond
        ((eq? m 'front-ptr) front-ptr)
        ((eq? m 'rear-ptr) rear-ptr)
        ((eq? m 'empty-queue?) empty-queue?)
        ((eq? m 'front-queue) front-queue)
        ((eq? m 'insert-queue!) insert-queue!)
        ((eq? m 'delete-queue!) delete-queue!)
        (else (error "Unknown operation" m))
      )
    )
    dispatch
  )
)

; test
; (define q1 (make-queue))
; ((q1 'insert-queue!) 'a)
; (display ((q1 'front-queue)))(newline)
; ((q1 'insert-queue!) 'b)
; (display (q1 'front-ptr))(newline)
; ((q1 'delete-queue!))
; ((q1 'delete-queue!))
; (display (q1 'front-ptr))(newline)
