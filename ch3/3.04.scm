(define (make-account balance passwd)
  (define TOTAL 7)
  (let ((miss 0))
    (define (withdraw x)
      (if (>= balance x) (begin (set! balance (- balance x)) balance)
        (error "Not enough balance -- WITHDRAW" (list balance x))
      )
    )
    (define (deposit x)
      (begin (set! balance (+ balance x)) balance)
    )
    (define (call-the-cops x) "911!")
    (define (wrong-pasword x) "Incorrect password.")
    (define (pass-match? pass)
      (if (eq? pass passwd)
        (begin (set! miss 0) #t)
        (begin (set! miss (1+ miss)) #f)
      )
    )

    (define (dispatch pass op)
      (if (pass-match? pass)
        (cond
          ((eq? op 'withdraw) withdraw)
          ((eq? op 'deposit) deposit)
          (else (error "Illegal operation -- inner MAKE-ACCOUNT" op))
        )
        (if (< miss TOTAL) wrong-pasword call-the-cops)
      )
    )
    dispatch
  )
)

; test
; (define acc (make-account 100 'secret))
; (display ((acc 'secret 'withdraw) 30))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'secret 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
; (display ((acc 'wrong 'deposit) 50))(newline)
(display ((acc 'wrong 'deposit) 50))(newline)
