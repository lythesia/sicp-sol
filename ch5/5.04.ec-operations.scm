(define dont-run 1)
(include "../ch4/4.01.no-aly.scm")

(define (get-global-environment) the-global-environment)
(define (empty-arglist) '())
(define (adjoin-arg arg arglist) (append arglist (list arg)))
(define (last-operand? ops) (null? (cdr ops)))
(define cond-first-clause car)
(define cond-first-clause-predicate caar)
(define cond-first-clause-actions cdar)
(define cond-rest-clauses cdr)
(define cond-no-clauses? null?)

(define eceval-operations
  (list
    ; env
    (list 'get-global-environment get-global-environment)
    ; repl
    (list 'prompt-for-input prompt-for-input)
    (list 'read read)
    (list 'announce-output announce-output)
    (list 'user-print user-print)
    (list 'eof-object? eof-object?)
    (list 'exit exit)
    ; parse
    (list 'self-evaluating? self-evaluating?)
    (list 'variable? variable?)
    (list 'quoted? quoted?)
    (list 'assignment? assignment?)
    (list 'definition? definition?)
    (list 'if? if?)
    (list 'lambda? lambda?)
    (list 'begin? begin?)
    (list 'application? application?)
    (list 'cond? cond?)
    (list 'cond->if cond->if)
    (list 'cond-clauses cond-clauses)
    (list 'cond-first-clause cond-first-clause)
    (list 'cond-rest-clauses cond-rest-clauses)
    (list 'cond-first-clause-predicate cond-first-clause-predicate)
    (list 'cond-first-clause-actions cond-first-clause-actions)
    (list 'cond-actions cond-actions)
    (list 'cond-predicate cond-predicate)
    (list 'cond-else-clause? cond-else-clause?)
    (list 'cond-no-clauses? cond-no-clauses?)
    (list 'let? let?)
    (list 'let->combination let->combination)
    (list 'lookup-variable-value lookup-variable-value)
    (list 'text-of-quotation text-of-quotation)
    (list 'lambda-parameters lambda-parameters)
    (list 'lambda-body lambda-body)
    (list 'make-procedure make-procedure)
    (list 'operands operands)
    (list 'operator operator)
    (list 'empty-arglist empty-arglist)
    (list 'no-operands? no-operands?)
    (list 'first-operand first-operand)
    (list 'last-operand? last-operand?)
    (list 'rest-operands rest-operands)
    (list 'adjoin-arg adjoin-arg)
    (list 'primitive-procedure? primitive-procedure?)
    (list 'compound-procedure? compound-procedure?)
    (list 'apply-primitive-procedure apply-primitive-procedure)
    (list 'procedure-parameters procedure-parameters)
    (list 'procedure-environment procedure-environment)
    (list 'procedure-body procedure-body)
    (list 'extend-environment extend-environment)
    (list 'begin-actions begin-actions)
    (list 'first-exp first-exp)
    (list 'last-exp? last-exp?)
    (list 'rest-exps rest-exps)
    (list 'if-predicate if-predicate)
    (list 'true? true?)
    (list 'false? false?)
    (list 'if-alternative if-alternative)
    (list 'if-consequent if-consequent)
    (list 'assignment-variable assignment-variable)
    (list 'assignment-value assignment-value)
    (list 'set-variable-value! set-variable-value!)
    (list 'definition-variable definition-variable)
    (list 'definition-value definition-value)
    (list 'define-variable! define-variable!)
  )
)
