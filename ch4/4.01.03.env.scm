(define (true? x)
  (not (eq? x #f))
)

(define (false? x)
  (eq? x #f)
)

(define (make-procedure parameters body env)
  (list 'procedure parameters body env)
)
(define (compound-procedure? p) (tagged-list? p 'procedure))
(define procedure-parameters cadr)
(define procedure-body caddr)
(define procedure-environment cadddr)

; def env
;   (frame . outer-env)
(define (enclosing-environment env) (cdr env))  ; outer
(define (first-frame env) (car env))
(define the-empty-environment '())

; list-struct:
;   (var-1 var-2 ..) . (val-1 val-2 ..)
(define (make-frame variables values) (cons variables values))
(define frame-variables car)
(define frame-values cdr)
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame)))
)

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals)
    )
  )
)

; O(n)
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond
        ; current env not found, goto outer
        ((null? vars) (env-loop (enclosing-environment env)))
        ; found
        ((eq? var (car vars)) (car vals))
        ; iter
        (else (scan (cdr vars) (cdr vals)))
      )
    )
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame) (frame-values frame))
      )
    )
  )
  (env-loop env)
)
(define (set-variable-value! var val env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond
        ((null? vars) (env-loop (enclosing-environment env)))
        ((eq? var (car vars)) (set-car! vals val))
        (else (scan (cdr vars) (cdr vals)))
      )
    )
    (if (eq? env the-empty-environment)
      (error "Unbound variable -- SET" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame) (frame-values frame))
      )
    )
  )
  (env-loop env)
)
(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan vars vals)
      (cond
        ((null? vars) (add-binding-to-frame! var val frame))
        ((eq? var (car vars)) (set-car! vals val))
        (else (scan (cdr vars) (cdr vals)))
      )
    )
    (scan (frame-variables frame) (frame-values frame))
  )
)
