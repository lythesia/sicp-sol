(include "4.03.02.common.scm")

(define (eight-queens)
  (define (safe? position)
    (define (valid? q1 q2)
      (let
        ((r1 (car q1)) (c1 (cadr q1))
         (r2 (car q2)) (c2 (cadr q2)))
        (and (!= r1 r2) (!= (abs (- c1 c2)) (abs (- r1 r2))))
      )
    )
    (let ((new-queen (list (last position) (length position))))
      (define (test prev-rows prev-col)
        (cond
          ((null? (cdr prev-rows)) #t)
          ((safe? (list (car prev-rows) prev-col) new-queen) (test (cdr prev-rows) (+ prev-col 1)))
          (else #f)
        )
      )
      (test position 1) ; from col 1 on
    )
  )

  (let
    ((queen-1 (amb 1 2 3 4 5 6 7 8))
     (queen-2 (amb 1 2 3 4 5 6 7 8))
     (require (safe? (list queen-1 queen-2)))
     (let ((queen-3 (amb 1 2 3 4 5 6 7 8)))
       (require (safe? (list queen-1 queen-2 queen-3)))
       (let ((queen-4 (amb 1 2 3 4 5 6 7 8)))
         (require (safe? (list queen-1 queen-2 queen-3 queen-4)))
         (let ((queen-5 (amb 1 2 3 4 5 6 7 8)))
           (require (safe? (list queen-1 queen-2 queen-3 queen-4 queen-5)))
           (let ((queen-6 (amb 1 2 3 4 5 6 7 8)))
             (require (safe? (list queen-1 queen-2 queen-3 queen-4 queen-5 queen-6)))
             (let ((queen-7 (amb 1 2 3 4 5 6 7 8)))
               (require (safe? (list queen-1 queen-2 queen-3 queen-4 queen-5 queen-6 queen-7)))
               (let ((queen-8 (amb 1 2 3 4 5 6 7 8)))
                 (require (safe? (list queen-1 queen-2 queen-3 queen-4 queen-5 queen-6 queen-7 queen-8)))
                 (map
                   (lambda (col row) (list col row))
                   (list 1 2 3 4 5 6 7 8)
                   (list queen-1 queen-2 queen-3 queen-4 queen-5 queen-6 queen-7 queen-8)
                 )
               )
             )
           )
         )
       )
     )
    )
  )
)
